
Path? :Record as:
    name? String

    at? :Initializer from:
        name? String
    as:
        $ name = name

    mkdir? :Function from:
        mode? Integer
    may:
        Errno_exception
    import:
        "path_mkdir"

    rmdir? :Function may:
        Errno_exception
    import:
        "path_rmdir"

Reader? :Class as:
    fd? Integer
    
    on? :Initializer from:
        fd? Integer
    as:
        $ fd = fd

    stdin? :Initializer
    as:
        $ fd = 0
        
    read? :Function
        Integer
    from:
        buffer? Byte Slice
    may:
        Errno_exception
    import:
        "reader_read"

    get? :Function
        Byte Array Ref
    from:
        length? Integer
    may:
        Errno_exception
    import:
        "reader_get"

    get_all? :Function
        Byte Array Ref
    may:
        Errno_exception
    import:
        "reader_get_all"


Reader_buffer? :Class as:
    reader? Reader Ref
    buffer? Byte Array Ref
    length? Integer
    
    new? :Initializer from:
        r? Reader Ref
    as:
        $ reader = r
        $ buffer = Byte Array Ref `all(0, 4096)
        $ length = 0
        
    fill? :Function as:
        $ length += :try $ reader read(:try $ buffer slice($ length, $ buffer length - $ length))

    peek? :Function Byte Slice as:
        :return :try $ buffer slice(0, $ length)
        
    grab? :Function from:
        length? Integer
    as:
        $ buffer remove(length)
        $ length -= length  # TODO
    
    
Decoder? :Class as:
    rbuffer? Reader_buffer Ref
    
    new? :Initializer from:
        rb? Reader_buffer Ref
    as:
        $ rbuffer = rb
        
    getline? :Function String as:
        bytes? Byte Slice = :eval:
            :repeat on: `true do:
                s? = $ rbuffer peek
                
                :try
                    i? = s find(10)  # newline
                    :eval s slice(0, i)
                or:
                    $ rbuffer fill
                    :fixed
                    
            :eval `empty  # FIXME: workaround for :repeat not being Whatever
            
        string? = bytes decode_utf8
        $ rbuffer grab(bytes length + 1)
        
        :return string
