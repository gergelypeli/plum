
Parse_error? :Treenumeration
    PARSE_ERROR


Value? :Union as:
    null? Unit
    boolean? Boolean
    numeric? Float
    string? String
    array? Value Array
    object? (String, Value) Map


Parser? :Abstract as:
    parse? :Function Value raise: Parse_error

    
String_parser? :Class Parser as:
    input? String
    position? Integer
    
    from? :Initializer from: i? String as:
        $ input = i
        $ position = 0
        
    peek_character? :Function Character as:
        :return $ input[$ position]
        
    parse_character? :Function Character as:
        c? = $ input[$ position]
        $ position += 1
        :return c
    
    parse_ws? :Function as:
        Std parse_ws($ input, $ position)
        
    parse_identifier? :Function String raise: Parse_error as:
        :try
            :return Std parse_identifier($ input, $ position)
        fix:
            :raise `PARSE_ERROR

    parse_integer? :Function Integer raise: Parse_error as:
        :try
            :return Std parse_integer($ input, $ position)
        fix:
            :raise `PARSE_ERROR

    parse_float? :Function Float raise: Parse_error as:
        :try
            :return Std parse_float($ input, $ position)
        fix:
            :raise `PARSE_ERROR

    parse_string? :Function String raise: Parse_error as:
        :try
            :return Std parse_jstring($ input, $ position)
        fix:
            :raise `PARSE_ERROR

    parse_array? :Function Value Array raise: Parse_error as:
        $ parse_character
        $ parse_ws
        
        :if $ peek_character == "]" then:
            $ parse_character
            :return {}
        
        a? Value Array = {}
        
        :repeat on: `true do:
            x? = :try $ parse_value
            a push(x)
            
            $ parse_ws
            c? = :try $ parse_character
            
            :if c == "]" then:
                :return a
            else:if c != "," then:
                :raise `PARSE_ERROR
                
            $ parse_ws
            
        :raise `PARSE_ERROR  # stupid fix for :repeat

    parse_object? :Function (String, Value) Map raise: Parse_error as:
        $ parse_character
        $ parse_ws
        
        :if $ peek_character == "}" then:
            $ parse_character
            :return {}
        
        m? (String, Value) Map = {}
        
        :repeat on: `true do:
            key? = :try $ parse_string
            
            $ parse_ws
            c? = :try $ parse_character
            
            :if c != ":" then:
                :raise `PARSE_ERROR
                
            $ parse_ws
            
            value? = :try $ parse_value
            m add(key, value)
            
            $ parse_ws
            c = :try $ parse_character
            
            :if c == "}" then:
                :return m
            else:if c != "," then:
                :raise `PARSE_ERROR
                
            $ parse_ws
            
        :raise `PARSE_ERROR  # stupid fix for :repeat

    parse_value? :Function Value raise: Parse_error as:
        $ parse_ws
        
        c? = $ peek_character

        :if c is_alpha then:
            id? = :try $ parse_identifier
            
            :if id == "null" then:
                :return `null
            else:if id == "false" then:
                :return `boolean(`false)
            else:if id == "true" then:
                :return `boolean(`true)
            else:
                :raise `PARSE_ERROR
        else:if c is_digit || c == "-" then:
            :return `numeric(:try $ parse_float)
        else:if c == `QU then:
            :return `string(:try $ parse_string)
        else:if c == "[" then:
            :return `array(:try $ parse_array)
        else:if c == "{" then:
            :return `object(:try $ parse_object)
        else:
            :raise `PARSE_ERROR

    @.parse? :Function Value raise: Parse_error as:
        :try
            :return $ parse_value
        fix:
            :raise `PARSE_ERROR


Printer? :Abstract as:
    print? :Function String raise: Parse_error

    
String_printer? :Class Printer as:
    input? Value
    stream? String
    
    from? :Initializer from: v? Value as:
        $ input = v
        $ stream = ""
        
    print_character? :Function from: c? Character as:
        $ stream += "{}" { c raw }
    
    print_identifier? :Function from: s? String as:
        $ stream += s

    print_integer? :Function from: i? Integer as:
        $ stream += "{}" { i }

    print_float? :Function from: f? Float raise: Parse_error as:
        $ stream += "{}" { f }

    print_string? :Function from: s? String raise: Parse_error as:
        Std print_jstring(s, $ stream)

    print_array? :Function from: a? Value Array raise: Parse_error as:
        $ print_character("[")
        tail? Boolean = `false
    
        :for a each: v? do:
            :if tail then:
                $ stream += ","
            else:
                tail = `true
                
            :try $ print_value(v)
            
        $ print_character("]")

    print_object? :Function from: m? (String, Value) Map raise: Parse_error as:
        $ print_character(`LB)
        tail? Boolean = `false
    
        :for m items_by_age each: iv? do:
            :if tail then:
                $ stream += ","
            else:
                tail = `true
                
            :try $ print_string(iv index)
            
            $ print_character(":")
            
            :try $ print_value(iv value)
            
        $ print_character(`RB)

    print_value? :Function from: v? Value raise: Parse_error as:
        :switch v do:
            :is ~null then:
                $ print_identifier("null")
            else:is b? = ~boolean then:
                :if b then:
                    $ print_identifier("true")
                else:
                    $ print_identifier("false")
            else:is s? = ~string then:
                :try $ print_string(s)
            else:is n? = ~numeric then:
                :try $ print_float(n)
            else:is a? = ~array then:
                :try $ print_array(a)
            else:is m? = ~object then:
                :try $ print_object(m)

    @.print? :Function String raise: Parse_error as:
        :try
            $ print_value($ input)
            :return $ stream
        fix:
            :raise `PARSE_ERROR
