
Path? :Record as:
    name? String

    at? :Initializer from:
        name? String
    as:
        $ name = name

    mkdir? :Function from:
        mode? Integer
    may:
        Errno_exception
    import:
        "fs__Path__mkdir"

    rmdir? :Function may:
        Errno_exception
    import:
        "fs__Path__rmdir"


File? :Class as:
    fd? Integer32
    
    on? :Initializer from:
        fd? Integer32
    as:
        $ fd = fd

    stdin? :Initializer
    as:
        $ fd = 0
        
    read? :Function
        Integer
    from:
        buffer? Byte Slice
    may:
        Errno_exception
    import:
        "fs__File__read"


File_reader? :Class as:
    file? File Ref
    buffer? Byte Array Ref
    length? Integer
    
    new? :Initializer from:
        f? File Ref
    as:
        $ file = f
        $ buffer = Byte Array Ref `all(0, 4096)
        $ length = 0
        
    fill? :Function may: { EXHAUSTED } as:
        :if $ length == $ buffer length then:
            $ buffer refill(0, 4096)
            
        rest? = :try $ buffer slice($ length, $ buffer length - $ length)
        readed? = :try $ file read(rest)
        
        :if readed == 0 then:
            :raise `EXHAUSTED
        else:
            $ length += readed

    peek? :Function Byte Slice as:
        :return :try $ buffer slice(0, $ length)
        
    grab? :Function from:
        length? Integer
    as:
        $ buffer remove(length)
        $ length -= length  # TODO
    
    
Decoder? :Class as:
    reader? File_reader Ref
    
    new? :Initializer from:
        r? File_reader Ref
    as:
        $ reader = r
        
    get_line? :Function String may: { EXHAUSTED } as:
        :repeat on: `true do:
            s? = $ reader peek
            
            :try
                i? = s find(10)  # newline
                string? = s slice(0, i) decode_utf8
                $ reader grab(i + 1)
                :return string
            or:
                :try
                    $ reader fill
                or:
                    :if s length == 0 then:
                        :raise `EXHAUSTED
                    else:
                        string? = s decode_utf8
                        $ reader grab(s length)
                        :return string
                        
                :fixed
            
        :return `empty  # Workaround

    get_lines? :Function String Stack Ref as:
        lines? String Stack Ref = `empty
        
        :x:repeat on: `true do:
            :try
                s? = $ get_line
                :try lines push(s)
            or:
                :x

        :return lines
        
