
Stream_errors? :Treenumeration
    EXHAUSTED

Path? :Record as:
    name? String

    at? :Initializer from:
        name? String
    as:
        $ name = name

    mkdir? :Function from:
        mode? Integer
    raise:
        Errno_exception
    import:
        "fs__Path__mkdir"

    rmdir? :Function raise:
        Errno_exception
    import:
        "fs__Path__rmdir"


Istream? :Abstract as:
    read? :Function Integer from: buffer? Byte Slice raise: Errno_exception


File_istream? :Class Istream as:
    fd? Integer32
    
    on? :Initializer from:
        fd? Integer32
    as:
        $ fd = fd

    stdin? :Initializer
    as:
        $ fd = 0
        
    @.read? :Function
        Integer
    from:
        buffer? Byte Slice
    raise:
        Errno_exception
    import:
        "fs__File__read"


Reader? :Abstract as:
    fill? :Function raise: Stream_errors
    peek? :Function Byte Slice
    grab? :Function from: length? Integer
    

File_reader? :Class Reader as:
    istream? Istream Ref
    buffer? Byte Array
    length? Integer
    
    new? :Initializer from:
        f? Istream Ref
    as:
        $ istream = f
        $ buffer = Byte Array `all(0, 4096)
        $ length = 0
        
    @.fill? :Function raise: Stream_errors as:
        :if $ length == $ buffer length then:
            $ buffer refill(0, 4096)
            
        rest? = :try $ buffer slice($ length, $ buffer length - $ length)
        readed? = :try $ istream read(rest)
        
        :if readed == 0 then:
            :raise `EXHAUSTED
        else:
            $ length += readed

    @.peek? :Function Byte Slice as:
        :return :try $ buffer slice(0, $ length)
        
    @.grab? :Function from:
        length? Integer
    as:
        $ buffer remove(length)
        $ length -= length  # TODO


Decoder? :Abstract as:
    get_line? :Function String raise: Stream_errors
    get_lines? :Function String Array

    
File_decoder? :Class Decoder as:
    reader? Reader Ref
    
    new? :Initializer from:
        r? Reader Ref
    as:
        $ reader = r
        
    @.get_line? :Function String raise: Stream_errors as:
        :repeat on: `true do:
            s? = $ reader peek
            
            :try
                i? = s find(10)  # newline
                string? = s slice(0, i) decode_utf8
                $ reader grab(i + 1)
                :return string
            fix:
                :try
                    $ reader fill
                fix:
                    :if s length == 0 then:
                        :raise `EXHAUSTED
                    else:
                        string? = s decode_utf8
                        $ reader grab(s length)
                        :return string
            
        :return ""  # Workaround

    @.get_lines? :Function String Array as:
        lines? String Array = `empty
        
        :x:repeat on: `true do:
            :try
                s? = $ @ get_line
                :try lines push(s)
            fix:
                :x

        :return lines
        
