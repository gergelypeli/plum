# First example

#2
#wtf? 2

Pair? :Record as:
    first? Integer
    second? Integer
    lself? :Lself

    new? :Initializer as:
        $ first = 1
        $ second = 2

    meth? :Function Integer as:
        Std prints("Meth!")
        :return $ first + $ second

    dump? :Function as:
        Std prints("Pair({x}, {y})" { x: $ first, y: $ second })

    sable? :Auto Streamifiable

    sable.streamify? :Function from: stream? String Lvalue as:
        stream += "({},{})" { $ first, $ second }
        
    lself.reset? :Function as:
        $ first = 0
        $ second = 0


Pairs? :Singleton as:        
    make_pair? :Function Pair as:
        p? Pair = {}
        p first = 11
        p second = 22
        :return p


    print_pair? :Function from:
        p? Pair Ovalue
    as:
        Std prints("A pair of ({x}, {y})" { x: p first, y: p second })


Foo? :Record as:
    hey? Bar.Baz
    f? :Function as:
        $ hey g
    
Bar? :Record as:
    Baz? :Record as:
        ho? Integer
        g? :Function as: :return
    
    
XCounter? :Record as:
    current? Integer
    limit? Integer
    lself? :Lself
    
    new? :Initializer from:
        n? Integer
    as:
        $ current = -1
        $ limit = n
        
    lself.itor? :Auto Integer Iterator

    lself.itor.next? :Function Integer may: Iterator_done_exception as:
        $ current += 1
    
        :if $ current == $ limit then:
            :raise `ITERATOR_DONE
            
        :return $ current
        
    ible? :Auto Integer Iterable
    
    ible.iter? :Function XCounter as:
        :return $


XStringiterator? :Record as:
    string? String
    index? Integer
    lself? :Lself
    
    new? :Initializer from:
        s? String
    as:
        $ string = s
        $ index = -1

    lself.itor? :Auto Character Iterator
    
    lself.itor.next? :Function Character may: Iterator_done_exception as:
        $ index += 1
    
        :if $ index == $ string length then:
            :raise `ITERATOR_DONE

        :return $ string[$ index]


Base? :Class as:
    Type? :Enumeration
        NICE, UGLY
        
    type? .Type
    base_value? Integer
    
    base_init? :Initializer as:
        $ type = `NICE
        $ base_value = 100
        Std prints("The base is initialized.")
    
    base_method? :Function as:
        Std prints("The base value is {x}." {x: $ base_value})
        
    ? :Finalizer as:
        Std prints("The base is finalized.")


Derived? :Class as:
    base? :Role by: Base
    derived_value? Integer
    
    derived_init? :Initializer as:
        $ base.base_init
        $ derived_value = 1000
        Std prints("The derived is initialized.")
        
    base.base_method? :Function as:
        Std prints("Derived base_method, the base value is {x}." {x: $ base base_value})
        #$.base base_method
        $ .orig
        
    derived_method? :Function as:
        Std prints("Derived method, just for fun.")
        
    ? :Finalizer as:
        Std prints("The derived is finalized.")
        
        
Intval? :Interface as:
    get? :Function Integer
    

Property? :Class as:
    value? Integer
    
    init? :Initializer as:
        $ value = 0
        
    get? :Function Integer as:
        :return $ value
        
    set? :Function from:
        x? Integer
    as:
        $ value = x
    

Greetable? :Class as:
    derived? :Role by: Derived
    small? :Role Intval
    large? :Role Intval
    left? :Role by: Property
    right? :Role by: Property

    init? :Initializer as:
        $ derived.derived_init
        $ left.init
        $ right.init
        $ number = 1
        $ name = "The Greetable"
        
        Std prints("I'm here as {}." { $ name })
        
    second_init? :Initializer as:
        $ init
        
    greet? :Function as:
        Std prints("Hello, I'm {}!" { $ name })

    ? :Finalizer as:
        Std prints("I'm outta here!")

    derived.base.base_method? :Function as:
        Std prints("Greetable base_method, the base value is {}." {$ derived base base_value})
        #$.derived base base_method
        $ .orig

    # Testing late declarations
    number? Integer
    name? String
    
    small.get? :Function Integer as:
        Std prints("Getting small...")
        :return 12
        
    large.get? :Function Integer as:
        Std prints("Getting large...")
        :return 120


Single? :Singleton as:
    single_number? Integer
    single_text? String
    
    init? :Initializer as:
        Std prints("Initializing Single.")
        $ single_number = 111
        $ single_text = "NEEDS " + "CLEANUP"
    
    ? :Finalizer as:
        Std prints("Finalizing Single.")
    
    single_function? :Function Integer as:
        :return $ single_number


Double? :Singleton as:
    double_number? Integer
    
    init? :Initializer as:
        Std prints("Initializing Double.")
        $ double_number = 222
    
    ? :Finalizer as:
        Std prints("Finalizing Double.")
    
    double_function? :Function Integer as:
        :return $ double_number


Util? :Singleton as:
    f? :Function Integer from:
        x? Integer
        y? Integer
    as:
        :return x * 2 + y * 3


    g? :Function Integer from:
        xxx? Integer Ovalue
        yyy? Integer Ovalue
    as:
        :return xxx + yyy


    triple? :Function (Integer, Integer, Integer) as:
        :return (97, 98, 99)


    nasty? :Function may: { SMALL_ERROR, BIG_ERROR } as:
        :raise `SMALL_ERROR


    twice? :Function from:
        how? Integer Dvalue
        what? Integer Code
    as:
        :try
            sum? = what(1) + what(2)
            Std prints("That was {sum}." {})
        or:
            Std prints("What failed!")


    passthrough? :Function from: what? Integer Code as:
        :try what or:
            Std prints("Passthrough code is breaking.")
            :fixed


Main? :Singleton as:
    restart? :Function as:
        $ start  # check predeclarations


    Myint? :Integer bytes: 8 is_unsigned: `false


    Mybyte? :Integer bytes: 1 is_unsigned: `false


    test_integers? :Function as:
        Std printi(Util f(1, 2))
    
        a? Integer = 0
        a = 2
        b? Integer = 0
        b = 3
    
        :if a == b then: Std prints("a == b") else: Std prints("a != b")
    
        :if a < b && a > b then: Std prints("Huh?") else: Std prints("Huh.")
    
        c? Integer = 0
        c = Integer :if a == b then: 100 else: 200
        Std prints("This should be 200: {c}" {})

        d? = Unteger8 6
        d += 7
        d = d * d
    
        :if d != 0 then: Std prints("Yes, d is nonzero.")

        myvar? .Myint = 0
    
        e? = +5_000_000_000
        Std prints("Five billion is {e}" {})
    
        f? = 0x_1234_5678_9abc_def0
        Std prints("A big hex number is {f}" {})
    
        g? = 1_311_768_467_463_790_320
        Std prints("The same in English {g}" {})

        h? = 0o110_642_547_423_257_157_360
        Std prints("Again in octal base {h}" {})
    
        i? = 0b_0001_0010_0011_0100_0101_0110_0111_1000_1001_1010_1011_1100_1101_1110_1111_0000
        Std prints("Aaaaaaaaand finally {i}" {})
    
        mybyte? .Mybyte = -128
        Std prints("Mybyte is {mybyte}" {})
    
        false? Boolean = `false
        true? Boolean = `true
    
        Std prints("Or truth table: {} {} {} {}" { false || false, false || true, true || false, true || true })
        Std prints("And truth table: {} {} {} {}" { false && false, false && true, true && false, true && true })


    test_floats? :Function as:
        j? = -31.4e-01
        Std printd(j)
        Std prints("Streamified as {j}" {})

        Std prints("Result is 160: {x}" {x: 100.0 + 2.0 * 3.0 / 0.1 })
    
        x? = 1.1
        y? = 2.2
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        y = x
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})
    
        y = `nan
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        x = `nan    
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        y = `pinf
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        x = `ninf
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        x = 0.0
        y = -0.0
        Std prints("Comparisons of {x} and {y}: cmp == < > <= >= {z} {a} {b} {c} {d} {e}" {x: x, y: y, z: x<=>y, a: x==y, b: x<y, c: x>y, d: x<=y, e: x>=y})

        Std prints("e={e} log(10)={l} 1.5**2={m}" {e: 1.0 exp, l: 10.0 log, m: 1.5 ** 2.0})
    

    test_strings? :Function as:
        a? = 1
        Std prints("Hello!")

        s? = "Szia!"
        Std prints(s)

        #c = 4
        #printu8(s[c])
    
        Std prints(s + s)

        s chars[3] = s[4]
        Std prints(s)

        s chars[3] = `unicode(592)
        Std prints(s)

        Std prints("s[3] is now {c}" { c: s[3] })

        z? = ""
        Std prints("Ez tök 대박")
    
        :if z == String "" then: Std prints("z is empty")
    
        z = s
        Std printb(z encode_utf8)

        :if z == "" then: Std prints("ERROR z is still empty")

        :if z == "Szia!" then: Std prints("ERROR z is Szia!")

        :if z == "Sziɐ!" then: Std prints("z is Sziɐ!")

        :if a == a then:
            zz? = "ZZ"
            Std prints(zz)
    
        Std prints((xx? = "hi") + xx)
    
        Std prints("XXXXX{a}YYYYY" {})
        Std prints("0{HT}8")
        Std prints("NUL: {NUL}")
        Std prints("A character: {}" { Character "ű" })
        
        wicked? = "{NUL}{HT}{ESC}{LB}{QU}{RB}{DEL}ő"
        Std prints("Wicked {} characters: {} {} {} {} {} {} {} {}" { wicked length, wicked[0], wicked[1], wicked[2], wicked[3], wicked[4], wicked[5], wicked[6], wicked[7] })
        Std prints("Wicked {} long string: {}" { wicked length, wicked })

        Std prints("Uni: {U263A} {}" { Character `U263b })

        Std prints("{six} and {seven}" { six: 6, seven: 7 })

        Std prints("aba and ab compares as: {c}" { c: "aba" <=> "ab" })
        Std prints("aba is less than ab: {c}" { c: "aba" < "ab" })

        chars? = "BFADCE"
        Std prints("Unsorted: {chars}" {})
        chars chars sort
        Std prints("Sorted:   {chars}" {})

        :is "foo" ~re ".*" then:
            Std prints("Regexp matched.")
        else:
            Std prints("REGEXP NOT MATCHED!")
    
        :is m? = "foo" ~re ".*" then:
            Std prints("Regexp matched as: {x}" {x: m[0]})
        else:
            Std prints("REGEXP NOT MATCHED!")

        :is m? = "this and that" ~re "(th[a-z]*).*(th[a-z]+)" then:
            Std prints("Regexp matched as {x} and {y}" {x: m[1], y: m[2]})
        else:
            Std prints("REGEXP NOT MATCHED!")
        
        :switch "foo" do:
            :is ~re ".*" then:
                Std prints("Regexp matched in switch.")
                :yield


    Myenum? :Enumeration
        FOO, BAR, BAZ


    test_enums? :Function as:
        fbb? .Myenum = `BAR
        :if fbb == `FOO then: Std prints("fbb is FOO") else: Std prints("fbb is not FOO")

        Std prints("fbb is actually {f}!" { f: fbb })


    test_ovalues? :Function as:
        Std printi(Util g(100, 100))
        Std printi(Util g(100))
        Std printi(Util g)


    test_records? :Function as:
        p? Pair = `new

        p first = 123
        p second = 456
        Pairs print_pair(p)
        Std printi(p meth)

        p = Pairs make_pair
        Std printi(p second)
    
        q? Pair = `new
        q first = 123
        q second = 456
        :if p == q then: Std prints("Equal tuples.") else: Std prints("Inequal tuples.")
    
        Pairs print_pair
    
        p dump dump
    
        r? Pair = `new
        r dump
    
        Pair { second: 222 } dump
    
        Std prints("Second is {x}" {x: Pair { second: 222 } second})

        q first = 11
        Std prints("{p} and {q} compares as {c}" { p: p, q: q, c: p <=> q })


    test_multis? :Function as:
        x1? Integer = 0
        x2? Integer = 0
        x3? Integer = 0
        (x1, x2, x3) = Util triple
        Std prints("Triple returned {x1}, {x2}, {x3}." {})
    
        (x2, x3) = Util triple
        Std prints("Triple short returned {x2}, {x3}." {})

        x3 = Util triple
        Std prints("Triple scalarized to {x3}" {})
    
        (y1? Integer, y2? Integer, y3? Integer) = Util triple
        Std prints("Triple initialized {y1}, {y2}, {y3}." {})
    
        (y4? Integer, y5? Integer) = Util triple
        Std prints("Triple short initialized {y4}, {y5}." {})
        
        (z1?, z2?, z3?) = Util triple
        Std prints("Triple bare initialized {z1}, {z2}, {z3}." {})

        (z4?, z5?) = Util triple
        Std prints("Triple bare short initialized {z4}, {z5}." {})


    MyTree? :Treenumeration
        ONE { TEN, ELEVEN, TWELVE },
        TWO { TWENTY },
        THREE,
        FOUR


    test_controls? :Function as:
        :repeat i? = 0 on: i < 3 by: i += 1 do:
            Std prints("something")

        Std prints("Done.")

        my_tree? .MyTree = `TWENTY
        Std prints("This tree is {my_tree}." {})
    
        :switch my_tree do:
            :is ~TWO then:
                Std prints("Two-something.")

            :is `TWENTY then:
                Std prints("Implicitly twenty.")

            :is my_tree then:
                Std prints("Implicitly itself.")

            :is {} then:
                Std prints("IN THE EMPTY SET!")
            
            :is { `TWENTY } then:
                Std prints("Single twenty.")
            
            :is { my_tree } then:
                Std prints("Single itself.")
            
            :is { `ONE, `TWENTY, `FOUR } then:
                Std prints("Multi twenty.")
            
            :is { `ONE, my_tree, `FOUR } then:
                Std prints("Multi itself.")

            :is ~TWENTY then:
                Std prints("Twenty.")
                :yield
            
            Std prints("Not any.")
            :yield

        :try
            Util nasty
        or:
            :is ~BIG_ERROR then:
                Std prints("This was a big error!")
            
            :is ~SMALL_ERROR then:
                Std prints("This was a small error!")
                :fixed
            
            Std prints("Too bad!")

        # Only for testing uncaught exceptions!
        #:try
        #    Util nasty

        :for 3 countup each: c? do:
            Std prints("Counting up: {c}" {})

        :for 3 countdown each: c? do:
            Std prints("Counting down: {c}" {})

        :for "Abc" each: c? do:
            Std prints("Iterating elems: {c}" {})

        :for "Abc" indexes each: i? do:
            Std prints("Iterating indexes: {i}" {})
        
        :for "Abc" items each: it? do:
            Std prints("Iterating items: {i} => {e}" {i: it index, e: it value})

        ait? = "Abc" elements
        :for ait each: c? do:
            Std prints("Iterating elems again: {c}" {})
    
        x3? Integer = 0
        x3 = :lol:
            Std prints("Now yielding.")
            :lol 33
            Std prints("Don't print this!")
            :lol 44
        
        Std prints("Let's hope that {x3} == 33." {})
    
        # Must survive adding an Integer to a Whatever
        :lol:
            100 + :lol
    
        x3 = :switch 1 do: :yield 44
    
        Std prints("Let's hope that {x3} == 44." {})
    
        x3 = :try 55

        Std prints("Let's hope that {x3} == 55." {})
    
        x4? Integer = :try 66

        Std prints("Let's hope that {x4} == 66." {})
    
        :if Boolean `false > `true then:
            Std prints("Fake news!")

        :if !! Boolean `true then:
            Std prints("Faker news!")

        Util twice(how: h? what:this: (Std prints("You want {h}?" {}), :this h * 1000))

        :eval:
            Util passthrough(what:this: (:eval, :this 0))
            Std prints("This shouldn't be printed!")

        :hihi:if `true then: x3 else:if `false then: x4

        :if `true then:
            last? = 0
            Std prints("Returning.")
            :return
    
        Std prints("Don't print this!")


    test_arrays? :Function as:
        strings? String Array = `empty
        Std prints("Empty array length: {x}" { x: strings length })

        ss? String Array = { "foo", "bar" }
        Std prints("Nonempty array has {x} and {y}" { x: ss[0], y: ss[1] })

        dd? = ss + ss
        Std prints("Doubled array has {}, {}, {}, {}" { dd[0], dd[1], dd[2], dd[3] })

        dd += ss
        Std prints("Tripled array has {}, {}, {}, {}, {}, {}" { dd[0], dd[1], dd[2], dd[3], dd[4], dd[5] })

        Std prints("Array contents: {}" { ss })

        :for ss each: i? do:
            Std prints("Array element {i}" {})

        :for ss elements each: i? do:
            Std prints("Array element {i}" {})

        cc? = ss

        ss_popped1? = :try ss pop
        Std prints("Array popped {ss_popped1}" {})
        ss_popped2? String = :try ss pop
        Std prints("Array popped {ss_popped2}" {})

        Std prints("Array length became {}, while copy still contains {} elems {} and {}." { ss length, cc length, cc[0], cc[1] })

        st? String Array = `empty
        :try st push("foo")
        :try st push("bar")
        :try st push("baz")
        Std prints("Pushed stack length: {x}" { x: st length })
        Std prints("Pushed stack has 2. elem: {x}" { x: st[2] })

        Std prints("Stack contents: {}" { st })

        :for st each: x? do:
            Std prints("Stack has: {x}" {})

        baz? String = :try st pop
        :try st pop
        :try st pop
        Std prints("Popped baz as {baz}" {})
        Std prints("Popped stack length: {x}" { x: st length })

        sl? String Array = { "foo", "bar", "baz" }

        sl1? String Slice = `empty
        Std prints("Empty slice is {x} long" { x: sl1 length })

        sl2? String Slice = `all(sl)
        Std prints("Full slice is {x} long" { x: sl2 length })
        Std prints("And contains {x}" { x: :try sl2[2] })

        sl3? = :try sl slice(1, 1)
        Std prints("Mid slice is {x} long" { x: sl3 length })
        Std prints("And contains {x}" { x: :try sl3[0] })

        :for sl3 each: x? do:
            Std prints("Slice has: {x}" {})
            

    test_queues? :Function as:
        ca? String Queue = { "foo", "bar", "baz", "xxx" }
        :try ca pop
        Std prints("Have a Circularray of {x}" { x: ca length })
        ca1? String = :try ca shift
        Std prints("Shifted {x}, remained {y} and {z}." { x: ca1, y: ca[0], z: ca[1] })
        :try ca unshift("foo")
        :try ca unshift("foofoo")
        Std prints("Unshifted {x} and {y} to {z} and {w}" { x: ca[0], y: ca[1], z: ca[2], w: ca[3] })
        Std prints("Circularray length is {l}" { l: ca length })

        :for ca items each: it? do:
            Std prints("Circularray items: {x} => {y}" {x: it index, y: it value})

        qu? String Queue = { "A", "B", "C", "D", "E", "F", "G", "H" }
        :try qu shift
        :try qu push("I")  # folds
        :try qu push("J")  # grows
        :for qu items each: it? do:
            Std prints("Queue items: {x} => {y}" { x: it index, y: it value })

        qv? String Queue = { "A", "B", "C", "D", "E", "F", "G", "H" }
        :try qv pop
        :try qv unshift("$")  # folds
        :try qv unshift("$$") # grows
        :for qv items each: it? do:
            Std prints("Queue items: {x} => {y}" { x: it index, y: it value })

        cc? = qv
        :try qv shift
        Std prints("Queue length became {}, while copy still contains {} elems like {} and {}." { qv length, cc length, cc[0], cc[1] })


    test_rbtrees? :Function as:
        rb? String Set = `reserved(8)
    
        :try
            rb add("A")
            rb add("C")
            rb add("E")
            rb add("D")
            rb add("B")
        
        Std prints("After adding five, length is {l}" { l: rb length })
        
        Std prints("Rbtree contents: {}" { rb })
    
        :for rb elements_by_age each: e? do:
            Std prints("Rbtree element by age: {e}" {})

        :for rb elements_by_order each: e? do:
            Std prints("Rbtree element by order: {e}" {})

        :if rb has("A") then:
            Std prints("Rb has A, good.")
        
        :if !! rb has("Z") then:
            Std prints("Rb has no Z, good")
    
        :try
            rb remove("A")
            rb remove("B")
            rb remove("C")
            rb remove("D")
            rb remove("E")
        
        Std prints("After removing all, length is {l}" { l: rb length })
    
        :if !! rb has("A") then:
            Std prints("Rb has no A, good")

        st? String Set = { "A", "B" }
    
        :try
            st add("C")
            st add("D")

        Std prints("Set contents: {}" { st })
    
        :for st elements_by_age each: e? do:
            Std prints("Set element: {e}" {})

        mp? (String, String) Map = {{ "A", "a" }, { "B", "b" }}
        :try
            mp add("C", "c")
            mp add("D", "d")
        :try
            mp remove("C")

        Std prints("Map length is {x}" {x: mp length})

        Std prints("Map contents: {}" { mp })
    
        # FIXME
        #:for mp wrapped elements_by_order each: iv? do:
        #    Std prints("Map element: {x} => {y}" {x: iv index, y: iv value})
    
        Std prints("Map element at A is: {x}" {x: mp["A"]})

        cc? = mp
        :try mp add("C", "c")
        Std prints("Map length became {}, while copy still contains {} elems like {} and {}." { mp length, cc length, cc["A"], cc["B"] })


    test_options? :Function as:
        op1? String Option = `some("XYZ")
        Std prints("This option is: {op1}" {})
    
        op2? String Option = `none
        Std prints("That option is: {op2}" {})
    
        op2 = op1
        Std prints("And became: {op2}" {})
        Std prints("So they're now equal: {x}" {x: op1 == op2})
        #Std prints("Is it none? {x} Is it some? {y}" {x: op1 is none, y: op1 is some})
    
        :is op1s? = op1 ~some then:
            Std prints("It contained some {op1s}." {})
        else:
            Std prints("IT CONTAINED NONE!")

        :is op1 ~none then:
            Std prints("IT CONTAINED NONE!")
        else:
            Std prints("It contained some.")
            

    test_classes? :Function Greetable Ref as:
        gr? Greetable Ref = `second_init
        gr greet
        
        Std prints("Small is {} and large is {}" { gr small get, gr large get })
        
        gr left set(13)
        gr right set(14)
        Std prints("Left is {} and right is {}" { gr left get, gr right get })
    
        gr2? = gr
        gr2 = gr
    
        wgr? = :ptr gr
        wgr greet

        wgr = gr

        gr derived derived_method
        gr derived base base_method

        bs? = gr derived base
        gr greet  # To make sure base refcount don't destroy the Greetable VT

        :is gr ~Greetable then:
            Std prints("Huh, greetable is Greetable.")

        :is gr ~Base then:
            Std prints("WAT, greetable is Base.")

        :is bs ~Greetable then:
            Std prints("WAT, base is Greetable.")

        wt? Greetable Weakref = `to(gr)

        # Test for alive
        :is wt ~live then:
            Std prints("WT is live.")
        else:
            Std prints("WT IS DEAD!")

        :is wt ~dead then:
            Std prints("WT IS DEAD!")
        else:
            Std prints("WT is live.")

        wvm? (String, Greetable) WeakValueMap = `empty
        :try
            wvm add("x", gr)
            wvm add("y", gr)

        wvm["y"] greet
        
        ccc? = wvm
        
        wvm remove("y")
        Std prints("wvm length is {x}" {x: wvm length})
        Std prints("ccc length is still {}" { ccc length })

        wim? (Greetable, String) WeakIndexMap = `empty
        :try
            wim add(gr, "incorrect")
            wim add(gr, "correct")
        Std prints("wim stores for gr: {x}" {x: wim[gr]})
        Std prints("wim length is {x}" {x: wim length})
    
        ws? Greetable WeakSet = `empty
        :try
            ws add(gr)
            ws add(gr)
        Std prints("ws stores gr: {x}" {x: ws has(gr)})
        Std prints("ws length is {x}" {x: ws length})

        killer? Greetable Ref = `init
        Std prints("Now killing the previous instance...")
        wgr = killer
        bs = killer derived base
        gr = killer
        gr2 = killer
        Std prints("Must have been killed.")

        Std prints("wvm length became {x}" {x: wvm length})
        Std prints("ccc length became {x}" {x: ccc length})
        Std prints("wim length became {x}" {x: wim length})
        Std prints("ws length became {x}" {x: ws length})

        # Test for dead
        :is wt ~live then:
            Std prints("WT is LIVE!.")
        else:
            Std prints("WT is dead.")

        :is wt ~dead then:
            Std prints("WT is dead.")
        else:
            Std prints("WT IS LIVE!")

        # Must return this so that all local references can be destroyed before the
        # killer is finalized    
        :return killer


    test_singletons? :Function as:
        Std prints("Single value should be 111: {x}" {x: Single single_function})
        Std prints("Double value should be 222: {x}" {x: Double double_function})


    ? :Import fs
    ? :Import .sub for:
        Sub
    

    test_files? :Function as:
        f? = fs.Path `at("test.mkdir")
        Std prints("Path is at {x}" {x: f name})
    
        :try
            f mkdir(0o710)

        :try
            f rmdir

        :try
            fs.Path `at("/test.mkdir") mkdir(0o777)
            Std prints("MKDIR UNEXPECTEDLY SUCCEEDED!")
        or:
            :is ~EACCES then:
                :fixed
            else:
                Std prints("MKDIR WEIRD EXCEPTION!")

        stdin? fs.File Ref = `stdin
        b? Byte Array = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        n? Integer = 0
    
        :try
            n = stdin read(:try b slice(0, 10))
        
        Std prints("Read {n} bytes from stdin." {})
    
        fr? = fs.File_reader Ref `new(stdin)
        dc? = fs.Decoder Ref `new(fr)

        Std prints("Say something!")
        s? = :try dc get_line
        Std prints("So, {s}?" {})
    
        Std prints("All your lines are belong to us!")
        lines? = dc get_lines
        Std prints("Those were {n} lines." {n: lines length})
    
        :for lines items each: it? do:
            Std prints("Line {x}: {y}" {x: it index, y: it value})
            
        .sub.Sub
        Sub


    start? :Function as:
        $ test_integers
        $ test_floats
        $ test_strings
        $ test_enums
        $ test_ovalues
        $ test_records
        $ test_multis
        $ test_controls
        $ test_arrays
        $ test_queues
        $ test_rbtrees
        $ test_options
        $ test_classes
        $ test_singletons
        $ test_files
        
        Std prints("Done.")
